/*
    IMUEvents.h

    Copyright Â© 2020 Occipital, Inc. All rights reserved.
    This file is part of the Structure SDK.
    Unauthorized copying of this file, via any medium is strictly prohibited.
    Proprietary and confidential.

    http://structure.io
*/

#pragma once

#include <ST/Macros.h>
#include <cmath>

namespace ST {

//------------------------------------------------------------------------------

/** @brief Raw 3-axis accelerometer sample data. */
struct ST_API Acceleration
{
    /** X-axis acceleration (g) */
    double x = NAN;

    /** Y-axis acceleration (g) */
    double y = NAN;

    /** Z-axis acceleration (g) */
    double z = NAN;
};

//------------------------------------------------------------------------------

/** @brief Raw 3-axis (Euler angles) gyroscope sample data. */
struct ST_API RotationRate
{
    /** X-axis rotation (rad/s) */
    double x = NAN;
    /** Y-axis rotation (rad/s) */
    double y = NAN;
    /** Z-axis rotation (rad/s) */
    double z = NAN;
};

//------------------------------------------------------------------------------


//------------------------------------------------------------------------------

/** @brief Structure Core accelerometer sample. */
struct ST_API AccelerometerEvent
{
     AccelerometerEvent();
    ~AccelerometerEvent();

    /** @brief Return the timestamp at which the accelerometer event was generated by the sensor, in seconds relative to an unspecified epoch. */
    double timestamp() const;

    /** @brief Return the timestamp at which the accelerometer event was received by the host, in seconds relative to an unspecified epoch. */
    double arrivalTimestamp() const;

    /** @brief Return the raw 3-axis accelerometer data in g. */
    Acceleration acceleration() const;

    /** @brief Return the temperature of the accelerometer unit. */
    double temperature() const;


    /** @brief Sets the per axis maximum value the imu will measure. */
    void setSaturationThreshold(double threshold);

    /** @brief Sets the raw accelerometer event data. */
    void setAccelEvent(double x, double y, double z, double timestamp, const char* deviceID, double arrivalTimestamp = NAN);

    ST_DECLARE_CLONABLE_OPAQUE_INTERNALS(AccelerometerEvent);
};

//------------------------------------------------------------------------------s

/** @brief Structure Core gyroscope sample. */
struct ST_API GyroscopeEvent
{
     GyroscopeEvent ();
    ~GyroscopeEvent ();

    /** @brief Returns the generation timestamp of the gyroscope event, in seconds. */
    double timestamp() const;

    /** @brief Return the timestamp at which the accelerometer event was received by the host, in seconds relative to an unspecified epoch. */
    double arrivalTimestamp() const;

    /** @brief Return the raw 3-axis (rotation vector, i.e. angle-axis) gyroscope data in radians per second. */
    RotationRate rotationRate() const;


    /** @brief Sets the per axis maximum value the imu will measure. */
    void setSaturationThreshold(double threshold);

    /** @brief Sets the raw gyroscope event data. */
    void setGyroEvent(double x, double y, double z, double timestamp, const char* deviceID);

    ST_DECLARE_CLONABLE_OPAQUE_INTERNALS(GyroscopeEvent);
};

//------------------------------------------------------------------------------

} // ST namespace


